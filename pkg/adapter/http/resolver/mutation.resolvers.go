package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.49

import (
	"context"
	"fmt"
	"html"
	"log"

	"github.com/chaki8923/wedding-backend/pkg/domain/model"
	"github.com/chaki8923/wedding-backend/pkg/domain/model/graph"
	"github.com/chaki8923/wedding-backend/pkg/lib/graph/generated"
	sentry "github.com/getsentry/sentry-go"
)

// CreateMessage is the resolver for the createMessage field.
func (r *mutationResolver) CreateMessage(ctx context.Context, input graph.NewMessage) (*model.Message, error) {
	log.Printf("メッセージ登録")
	// 入力値のエスケープ処理
	escapedText := html.EscapeString(input.Text)
	created, err := r.MsgUseCase.CreateMessage(&escapedText, &input.UserID)
	if err != nil {
		err = fmt.Errorf("resolver CreateMessage() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}

	return created, nil
}

// UpdateMessage is the resolver for the updateMessage field.
func (r *mutationResolver) UpdateMessage(ctx context.Context, userID string) (*model.Message, error) {
	panic(fmt.Errorf("not implemented: UpdateMessage - updateMessage"))
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input graph.NewUser) (*model.User, error) {
	panic(fmt.Errorf("not implemented: CreateUser - createUser"))
}

// CreateInvitation is the resolver for the createInvitation field.
func (r *mutationResolver) CreateInvitation(ctx context.Context, input graph.NewInvitation) (*model.Invitation, error) {
	log.Printf("招待状登録 %v", input)
	var err error

	fileUrl, err := r.IvtUseCase.UploadFileToS3(ctx, input.FileURL)
	if err != nil {
		return nil, fmt.Errorf("failed to upload file to S3: %w", err)
	}

	// 入力値のエスケープ処理
	escapedTitle := html.EscapeString(input.Title)
	escapedEvent := html.EscapeString(input.EventDate)
	escapedPlace := html.EscapeString(input.Place)
	escapedComment := html.EscapeString(input.Comment)
	// UUIDを生成

	// 招待状の作成
	created, err := r.IvtUseCase.CreateInvitation(
		&escapedTitle,
		&escapedEvent,
		&escapedPlace,
		&escapedComment,
		&input.UserID,
		&fileUrl,
	)
	if err != nil {
		err = fmt.Errorf("resolver CreateInvitation() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}

	return created, nil
}

// UpdateInvitation is the resolver for the updateInvitation field.
func (r *mutationResolver) UpdateInvitation(ctx context.Context, input graph.UpdateInvitation) (*model.Invitation, error) {
	log.Printf("招待状更新")
	// 入力値のエスケープ処理
	escapedTitle := html.EscapeString(*input.Title)
	escapedEvent := html.EscapeString(*input.EventDate)
	escapedPlace := html.EscapeString(*input.Place)
	escapedComment := html.EscapeString(*input.Comment)
	updated, err := r.IvtUseCase.UpdateInvitation(&input.ID, &escapedTitle, &escapedEvent, &escapedPlace, &escapedComment)
	if err != nil {
		err = fmt.Errorf("resolver CreateInvitation() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}

	return updated, nil
}

// CreateInvitee is the resolver for the createInvitee field.
func (r *mutationResolver) CreateInvitee(ctx context.Context, input graph.NewInvitee) (*model.Invitee, error) {
	log.Printf("招待者登録 %v", input)
	var err error

	fileUrl, err := r.IvteeUseCase.UploadFileToS3(ctx, input.FileURL)
	if err != nil {
		return nil, fmt.Errorf("failed to upload file to S3: %w", err)
	}

	// 入力値のエスケープ処理
	escapedFamilyKj := html.EscapeString(input.FamilyKj)
	escapedFamilyKn := html.EscapeString(input.FamilyKn)
	escapedFirstKj := html.EscapeString(input.FirstKj)
	escapedFirstKn := html.EscapeString(input.FirstKn)
	escapedZipCode := html.EscapeString(input.ZipCode)
	escapedEmail := html.EscapeString(input.Email)
	escapedAddress := html.EscapeString(input.AddressText)
	escapedAllergy := html.EscapeString(input.Allergy)

	// 招待状の作成
	created, err := r.IvteeUseCase.CreateInvitee(
		&escapedFamilyKj,
		&escapedFirstKj,
		&escapedFamilyKn,
		&escapedFirstKn,
		&escapedEmail,
		&escapedZipCode,
		&escapedAddress,
		&input.UserID,
		&escapedAllergy,
		&fileUrl,
	)
	if err != nil {
		err = fmt.Errorf("resolver CreateInvitation() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}

	return created, nil
}

// UpdateInvitee is the resolver for the updateInvitee field.
func (r *mutationResolver) UpdateInvitee(ctx context.Context, input graph.UpdateInvitee) (*model.Invitee, error) {
	log.Printf("招待者更新だ-------")

	var fileUrl string
	var err error
	if input.FileURL != nil {
		fileUrl, err = r.IvteeUseCase.UploadFileToS3(ctx, *input.FileURL)
		if err != nil {
			return nil, fmt.Errorf("failed to upload file to S3: %w", err)
		}
	}
	var escapedFamilyKj, escapedFamilyKn, escapedFirstKj, escapedFirstKn, escapedZipCode, escapedEmail, escapedAddress, escapedAllergy string

	// 入力値のエスケープ処理
	if input.FamilyKj != nil {
		escapedFamilyKj = html.EscapeString(*input.FamilyKj)
	}
	if input.FamilyKn != nil {
		escapedFamilyKn = html.EscapeString(*input.FamilyKn)
	}
	if input.FirstKj != nil {
		escapedFirstKj = html.EscapeString(*input.FirstKj)
	}
	if input.FirstKn != nil {
		escapedFirstKn = html.EscapeString(*input.FirstKn)
	}
	if input.ZipCode != nil {
		escapedZipCode = html.EscapeString(*input.ZipCode)
	}
	if input.Email != nil {
		escapedEmail = html.EscapeString(*input.Email)
	}
	if input.AddressText != nil {
		escapedAddress = html.EscapeString(*input.AddressText)
	}
	if input.Allergy != nil {
		escapedAllergy = html.EscapeString(*input.Allergy)
	}

	updated, err := r.IvteeUseCase.UpdateInvitee(
		&input.ID,
		&escapedFamilyKj,
		&escapedFirstKj,
		&escapedFamilyKn,
		&escapedFirstKn,
		&escapedEmail,
		&escapedZipCode,
		&escapedAddress,
		&escapedAllergy,
		&fileUrl,
		input.JoinFlag,
	)

	// JoinFlagのログ出力
	if input.JoinFlag != nil {
		log.Printf("JoinFlagの型: %T, 値: %v", *input.JoinFlag, *input.JoinFlag)
	} else {
		log.Printf("JoinFlagはnilです")
	}
	if err != nil {
		err = fmt.Errorf("resolver UpdateInvitee() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}

	return updated, nil
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, input graph.NewUpload) (*model.UploadImage, error) {
	log.Printf("画像登録 %v", input)
	var err error

	fileUrl, err := r.UpdUseCase.UploadFileToS3(ctx, input.FileURL)
	if err != nil {
		return nil, fmt.Errorf("failed to upload file to S3: %w", err)
	}

	// 入力値のエスケープ処理
	escapedComment := html.EscapeString(input.Comment)

	// 招待状の作成
	created, err := r.UpdUseCase.UploadFile(
		&escapedComment,
		&fileUrl,
	)
	if err != nil {
		err = fmt.Errorf("resolver CreateInvitation() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}

	return created, nil
}

// DeleteInvitee is the resolver for the deleteInvitee field.
func (r *mutationResolver) DeleteInvitee(ctx context.Context, id string) (*model.Invitee, error) {
	invitee, err := r.IvteeUseCase.DeleteInvitee(id)
	if err != nil {
		err = fmt.Errorf("resolver 招待者削除() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}
	return invitee, nil
}

// DeleteInvitation is the resolver for the deleteInvitation field.
func (r *mutationResolver) DeleteInvitation(ctx context.Context, id string) (*model.Invitation, error) {
	invitation, err := r.IvtUseCase.DeleteInvitation(id)
	if err != nil {
		err = fmt.Errorf("resolver 招待者削除() err %w", err)
		sentry.CaptureException(err)
		return nil, err
	}
	return invitation, nil
}

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

type mutationResolver struct{ *Resolver }
